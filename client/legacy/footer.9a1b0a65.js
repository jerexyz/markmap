import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, B as validate_each_argument, v as validate_slots, C as stores$1, D as validate_store, E as component_subscribe, f as element, t as text, k as claim_element, l as children, m as claim_text, g as detach_dev, p as attr_dev, n as add_location, r as insert_dev, w as append_dev, c as space, h as claim_space, F as noop, G as destroy_each } from './client.4dfa9913.js';

/* src/components/header.svelte generated by Svelte v3.29.0 */
const file = "src/components/header.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (20:4) {#each routes as route}
function create_each_block(ctx) {
	let li;
	let a;
	let t_value = /*route*/ ctx[4].name + "";
	let t;
	let a_aria_current_value;
	let a_href_value;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { "aria-current": true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "aria-current", a_aria_current_value = /*active*/ ctx[0] === /*route*/ ctx[4]
			? "page"
			: undefined);

			attr_dev(a, "href", a_href_value = /*route*/ ctx[4].path);
			add_location(a, file, 20, 10, 406);
			add_location(li, file, 20, 6, 402);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*active*/ 1 && a_aria_current_value !== (a_aria_current_value = /*active*/ ctx[0] === /*route*/ ctx[4]
			? "page"
			: undefined)) {
				attr_dev(a, "aria-current", a_aria_current_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(20:4) {#each routes as route}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let nav;
	let ul;
	let t0;
	let li0;
	let t1;
	let li1;
	let a;
	let t2;
	let each_value = /*routes*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			nav = element("nav");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			li0 = element("li");
			t1 = space();
			li1 = element("li");
			a = element("a");
			t2 = text("GitHub");
			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", {});
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			t0 = claim_space(ul_nodes);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			children(li0).forEach(detach_dev);
			t1 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a = claim_element(li1_nodes, "A", { href: true, target: true, rel: true });
			var a_nodes = children(a);
			t2 = claim_text(a_nodes, "GitHub");
			a_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li0, "class", "flex-1");
			add_location(li0, file, 22, 4, 522);
			attr_dev(a, "href", "https://github.com/gera2ld/markmap");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer noopener");
			add_location(a, file, 23, 8, 555);
			add_location(li1, file, 23, 4, 551);
			attr_dev(ul, "class", "flex");
			add_location(ul, file, 18, 1, 350);
			add_location(nav, file, 17, 0, 343);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(ul, t0);
			append_dev(ul, li0);
			append_dev(ul, t1);
			append_dev(ul, li1);
			append_dev(li1, a);
			append_dev(a, t2);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*active, routes, undefined*/ 5) {
				each_value = /*routes*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $page;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Header", slots, []);
	const { page } = stores$1();
	validate_store(page, "page");
	component_subscribe($$self, page, value => $$invalidate(3, $page = value));

	const routes = [
		{ path: ".", name: "home" },
		{ path: "repl", name: "try it out" },
		{ path: "docs", name: "docs" }
	];

	let active;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Header> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ stores: stores$1, page, routes, active, $page });

	$$self.$inject_state = $$props => {
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$page*/ 8) {
			 {
				const segment = $page.path.split("/")[1];
				$$invalidate(0, active = routes.find(item => item.path === segment) || routes[0]);
			}
		}
	};

	return [active, page, routes];
}

class Header extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Header",
			options,
			id: create_fragment.name
		});
	}
}

/* src/components/footer.svelte generated by Svelte v3.29.0 */

const file$1 = "src/components/footer.svelte";

function create_fragment$1(ctx) {
	let footer;
	let t0;
	let a;
	let t1;

	const block = {
		c: function create() {
			footer = element("footer");
			t0 = text("Designed with ♥ by ");
			a = element("a");
			t1 = text("gera2ld");
			this.h();
		},
		l: function claim(nodes) {
			footer = claim_element(nodes, "FOOTER", {});
			var footer_nodes = children(footer);
			t0 = claim_text(footer_nodes, "Designed with ♥ by ");
			a = claim_element(footer_nodes, "A", { href: true, target: true, rel: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "gera2ld");
			a_nodes.forEach(detach_dev);
			footer_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "https://github.com/gera2ld");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer noopener");
			add_location(a, file$1, 0, 34, 34);
			add_location(footer, file$1, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, footer, anchor);
			append_dev(footer, t0);
			append_dev(footer, a);
			append_dev(a, t1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(footer);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Footer", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Footer> was created with unknown prop '${key}'`);
	});

	return [];
}

class Footer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Footer",
			options,
			id: create_fragment$1.name
		});
	}
}

export { Footer as F, Header as H };
